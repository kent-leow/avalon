// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Room {
    id          String   @id @default(cuid())
    code        String   @unique
    hostId      String
    gameState   Json     // Enhanced GameState object with phase, round, votes, missions
    settings    Json
    phase       String   @default("lobby") // Current game phase
    startedAt   DateTime? // When the game was started
    maxPlayers  Int      @default(10)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    expiresAt   DateTime
    players     Player[]
    
    @@index([code])
    @@index([phase])
    @@index([expiresAt])
    @@index([hostId])
}

model Player {
    id        String   @id @default(cuid())
    name      String
    isHost    Boolean  @default(false)
    role      String?  // Role ID assigned during game start
    roleData  Json?    // Role-specific data and visible players
    isReady   Boolean  @default(false) // Player ready status for game start
    joinedAt  DateTime @default(now())
    sessionId String?  @unique
    roomId    String
    room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
    
    // Security-related relations
    sessions         SecuritySession[]
    auditLogs        AuditLog[]
    securityAlerts   SecurityAlert[]
    encryptedData    EncryptedData[]
    
    @@index([roomId])
    @@index([sessionId])
}

// Security Models
model SecuritySession {
    id                String   @id @default(cuid())
    playerId          String
    roomCode          String
    token             String   @unique
    refreshToken      String   @unique
    deviceFingerprint String
    ipAddress         String
    userAgent         String
    status            String   @default("active")
    createdAt         DateTime @default(now())
    lastActivity      DateTime @default(now())
    expiresAt         DateTime
    securityLevel     String   @default("medium")
    metadata          Json
    
    // Relations
    player           Player        @relation(fields: [playerId], references: [id], onDelete: Cascade)
    auditLogs        AuditLog[]
    securityAlerts   SecurityAlert[]
    
    @@index([playerId])
    @@index([roomCode])
    @@index([token])
    @@index([status])
    @@index([expiresAt])
}

model AuditLog {
    id        String   @id @default(cuid())
    timestamp DateTime @default(now())
    sessionId String
    playerId  String
    roomCode  String
    action    String
    details   Json
    ipAddress String
    userAgent String
    success   Boolean
    duration  Int
    metadata  Json
    
    // Relations
    session SecuritySession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    player  Player          @relation(fields: [playerId], references: [id], onDelete: Cascade)
    
    @@index([sessionId])
    @@index([playerId])
    @@index([roomCode])
    @@index([action])
    @@index([timestamp])
}

model SecurityAlert {
    id          String   @id @default(cuid())
    type        String
    severity    String
    title       String
    description String
    timestamp   DateTime @default(now())
    playerId    String?
    sessionId   String?
    roomCode    String?
    evidence    Json
    status      String   @default("new")
    metadata    Json
    
    // Relations
    player  Player?          @relation(fields: [playerId], references: [id], onDelete: Cascade)
    session SecuritySession? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    
    @@index([type])
    @@index([severity])
    @@index([status])
    @@index([playerId])
    @@index([sessionId])
    @@index([roomCode])
    @@index([timestamp])
}

model EncryptedData {
    id                String   @id @default(cuid())
    playerId          String   @unique
    encryptedRole     String
    encryptedKnowledge String
    signature         String
    timestamp         DateTime @default(now())
    sessionId         String
    checksum          String
    
    // Relations
    player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
    
    @@index([playerId])
    @@index([sessionId])
    @@index([timestamp])
}
